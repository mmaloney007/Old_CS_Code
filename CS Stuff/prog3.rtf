{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh9000\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs24 \cf0 (* nth on list *)\
 local\
  exception Impossible\
  fun nh (x::t) 0 = x\
  | nh (x::t) n = nh t (n-1)\
  | nh [] n = raise Impossible\
in\
  fun nth (l,i) =\
  if (i>0) then nh l i\
  else if (i=0) then nh l i\
  else nh l ((List.length l) + i)\
end;\
(* take the firsrt n elements of a list *)\
local\
  exception Impossible\
  fun takep (x::t) 0 l = List.rev(l)\
  | takep [] n l = List.rev(l)\
  | takep (x::t) n l = takep t (n-1) (x::l)\
  fun taken (x::t) 0 = (x::t)\
  | taken [] n = raise Impossible\
  | taken (x::t) n = taken t (n-1)\
in\
  fun take (l,0) = []\
  | take (l,n) =\
  if (n>0) then takep l n []\
  else taken l (List.length l + n)\
end;\
(* drop the firsrt n elements of a list *)\
local\
   exception Impossible\
   fun dropp [] n = raise Impossible\
   | dropp (x::t) 0 = (x::t)\
   | dropp (x::t) n = dropp t (n-1)\
   fun dropn [] n l = List.rev l\
   | dropn (x::t) 0 l = List.rev l\
   | dropn (x::t) n l = dropn t (n-1) (x::l)\
in\
  fun drop (l,0) = l\
  | drop (l,n) =\
  if (n>0) then dropp l n\
  else dropn l (List.length l + n) []\
end;\
(* tail recursive min *)\
local\
  exception Impossible\
  fun minh y [] = y\
  | minh y (x::t) =\
  if (y>x) then minh x t\
  else if (y=x) then minh x t\
  else minh y t\
in\
  fun min [] = raise Impossible\
  | min (x::t) = minh x t\
end;\
(* tail min using pre-defined *)\
local                  \
  exception Impossible\
in             \
  fun min [] = raise Impossible\
  | min (x::t) = foldl (Int.min) x t\
end;\
(* sort a list *)\
local\
   fun remove (x,s) = List.filter (fn y => x<>y) s\
   fun value (cmp, y, []) = y\
   | value (cmp, y, (x::t)) =\
   if cmp(y,x) then value (cmp, cmp(y,x), t)\
   else value (cmp, x, t)\
   fun sorth cmp [] l = l\
   | sorth cmp (t as x::y) l  = sorth  cmp  (remove((value(cmp, x, y)),  t)) (l@[(value(cmp, x, y))])\
in\
  fun sort cmp l = sorth cmp l []\
end;\
\
local\
   fun removeh(x,s) = List.filter (fn y => x<>y) s\
   fun value (cmp, y, []) = y\
   | value (cmp, y, (x::t)) =\
   if cmp(y,x) then value (cmp, y, t)\
   else value (cmp, x, t)\
   fun equal [] [] = true\
   | equal _ [] = false\
   | equal [] _ = false\
   | equal (x::t) (y::l) = (x=y) andalso equal t l;\
   fun sorth cmp [] l = l\
   | sorth cmp (t as x::y) l  = sorth  cmp  (removeh  (value(cmp, x, y))  t  []) (l@[(value(cmp, x, y))])\
in\
  fun perm(r,s) = equal (sorth (op <) r []) (sorth (op <) s [])\
end;}