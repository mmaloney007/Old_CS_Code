{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fmodern\fcharset77 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh9000\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs24 \cf0 (* Victor Maloney 10-2-2001 CS 671 *)
\f1\fs32 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 fun append(x::xs, y) = x::append(xs, y)\
| append(nil, y) = y;
\f0\fs24 \
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural
\cf0 (* Assignment 3 *)\
(* nth on list *)\
 local\
  exception Impossible\
  fun nh (x::t) 0 = x\
  | nh (x::t) n = nh t (n-1)\
  | nh [] n = raise Impossible\
in\
  fun nth (l,i) =\
  if (i>0) then nh l i\
  else if (i=0) then nh l i\
  else nh l ((List.length l) + i)\
end;\
\
(* take the firsrt n elements of a list *)\
local\
  exception Impossible\
  fun takep (x::t) 0 l = List.rev(l)\
  | takep [] n l = List.rev(l)\
  | takep (x::t) n l = takep t (n-1) (x::l)\
  fun taken (x::t) 0 = (x::t)\
  | taken [] n = raise Impossible\
  | taken (x::t) n = taken t (n-1)\
in\
  fun take (l,0) = []\
  | take (l,n) =\
  if (n>0) then takep l n []\
  else taken l (List.length l + n)\
end;\
\
(* drop the firsrt n elements of a list *)\
local\
   exception Impossible\
   fun dropp [] n = raise Impossible\
   | dropp (x::t) 0 = (x::t)\
   | dropp (x::t) n = dropp t (n-1)\
   fun dropn [] n l = List.rev l\
   | dropn (x::t) 0 l = List.rev l\
   | dropn (x::t) n l = dropn t (n-1) (x::l)\
in\
  fun drop (l,0) = l\
  | drop (l,n) =\
  if (n>0) then dropp l n\
  else dropn l (List.length l + n) []\
end;\
\
(* tail recursive min *)\
local\
  exception Impossible\
  fun minh y [] = y\
  | minh y (x::t) =\
  if (y>x) then minh x t\
  else if (y=x) then minh x t\
  else minh y t\
in\
  fun min [] = raise Impossible\
  | min (x::t) = minh x t\
end;\
\
(* tail min using pre-defined *)\
local                  \
  exception Impossible\
in             \
  fun min [] = raise Impossible\
  | min (x::t) = foldl (Int.min) x t\
end;\
\
(* sort a list *)\
local\
exception Problem\
fun split(nil) = (nil,nil)\
| split ([a]) = ([a],nil)\
| split (a::b::cs) =\
  let\
       val (M,N) = split (cs)\
  in \
     (a::M, b::N)\
end\
fun merge (f,(nil,M)) = M\
| merge (f,(L,nil)) = L\
| merge (f,(x::xs,y::ys)) =\
  if f(x,y) then x::merge(f,(xs,y::ys))\
  else if f(y,x) then y::merge(f,(x::xs,ys))\
  else x::merge(f,(xs,y::ys))\
in\
   fun sort f [] = []\
   | sort f [a] = [a]\
   | sort f L =\
   let \
       val (M,N) = split (L);\
       val M = sort f M;\
       val N = sort f N\
   in\
      merge(f,(M,N))\
   end\
end;\
\
(* less *)\
local\
  fun fix c =\
  if(Char.isLower(c)) then c\
  else if (Char.isUpper(c)) then Char.toLower(c)\
  else Char.chr(127)\
  fun compare [] _ = true\
  | compare _ [] = false\
  | compare (x::xs) (y::ys) =\
  if(fix(x) < fix(y)) then true\
  else if (fix(y) < fix (x)) then false\
  else compare xs ys\
in\
 fun less(s1,s2) = compare (explode s1) (explode s2)\
end;\
\
(* permatation of two lists *)\
local    \
   fun equal [] [] = true\
   | equal _ [] = false\
   | equal [] _ = false\
   | equal (x::t) (y::l) = (x=y) andalso equal t l\
in\
   fun perm(r,s) = equal (sort (op <) r) (sort (op <) s)\
end;\
\
(* changeOpt *)\
fun changeOpt l 0 = SOME []\
| changeOpt [] n = NONE\
| changeOpt (x::xs) n =\
if (x<=n) then case changeOpt xs (n-x) of\
NONE => changeOpt xs n\
| SOME p => SOME (x::p)\
else changeOpt xs n;\
\
(*changeExn*)\
local\
   exception CannotChange\
   fun changeExnh l 0 = SOME []\
   | changeExnh [] n = NONE\
   | changeExnh (x::xs) n =\
   if (x<=n) then case changeExnh xs (n-x) of\
   SOME p => SOME (x::p)\
   | NONE => changeExnh xs n\
   else changeExnh xs n\
in\
   fun changeExn l n =\
   case changeOpt l n of\
   NONE => raise CannotChange\
   | SOME p => p\
end;\
\
(* change Best *)\
fun changeBest l n = changeExn (sort (op >) l) n;\
\
(* changeBag *)\
local\
  local\
  fun untupple (x,0) = []\
  | untupple (x,y) = (x::untupple(x,y-1))\
  in\
  fun unbag [] acc = acc\
  | unbag (x::xs) acc = (unbag xs (acc@untupple(x)))   \
 end\
  local\
    fun number (x,s) = List.length(List.filter(fn y => x=y) s)\
    fun remove (x,s) = List.filter(fn y => x<>y) s\
  in\
   fun bag [] acc = acc\
   | bag l acc = bag (remove(hd(l),l)) (acc@[(hd(l),number(hd(l),l))])\
  end\
in\
  fun changeBag b n = (bag(changeExn (unbag b []) n) [])\
end;\
\
(* first cannot *)\
local\
  fun test l n =\
  case changeOpt l n of\
  NONE => n\
  | SOME p => test l (n+1)\
in\
  fun firstCannot l = test l 1\
end;\
(* perf of f x *)\
local\
  val timer = Timer.startRealTimer()\
  fun g f x = (f x,Real.fromLargeInt(Time.toMilliseconds(Timer.checkRealTimer(timer))))\
in\
  fun perf f x = g f x\
end;\
\
(* print perf *)\
local\
   val timer = Timer.startRealTimer()\
   val t = Real.toString(Real.fromLargeInt(Time.toMilliseconds(Timer.checkRealTimer(timer))))\
   fun printh s f t = (print (s^": ");\
                         print t;\
                         print ("millisecs."^"\\n");\
                         f)\
in\
   fun printPerf (f,name) = printh name f t\
end;\
\
(* set functions (sorted lists) *)\
val cmp = (op =);\
val emptySet = [] : ''a list;\
val isEmpty = null : ''a list -> bool;\
fun fromList x:''a list = x;\
fun size (x : ''a list)  = List.length(x);\
fun member (x,s) = List.exists (fn y => x=s) s;\
fun subset (s,t)  = List.all (fn x => member(x,t)) s;\
fun diff(s,t) = List.filter (fn x => not(member(x,t))) s;\
fun equal [] [] = true\
| equal _ [] = false\
| equal [] _ = false\
| equal (x::t) (y::l) = (x=y) andalso equal t l;\
fun remove(x,s) = List.filter (fn y => x<>y) s;\
local\
   fun intersecth [] (x::t) l = l\
   | intersecth (y::p) (x::t) l = \
     if (y=x) then intersecth p t (l@[y])\
     else (intersecth p (x::t) (l@[y]); intersecth (x::t) p l)\
   | intersecth (y::p) [] l = l\
   | intersecth [] [] l = l\
in\
   fun intersect g h = intersecth g h []\
end;\
local\
   fun unoinh [] (x::t) l = unoinh [] t (l@[x])\
   | unoinh (y::p) (x::t) l = \
     if (y=x) then unoinh p t (l@[y])\
     else if cmp(y,x) then unoinh p (x::t) (l@[y])\
     else unoinh (y::p) t (l@[x])\
    | unoinh (y::p) [] l = unoinh p [] (l@[y])\
    | unoinh [] [] l = l\
in\
   fun union (g:''a list) (h:''a list) = unoinh g h []\
end;\
fun insert x (l:''a list) = sort (cmp) (l@[x]);}